/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.tiendatecnologica;

import static com.mycompany.tiendatecnologica.BBDD.getConnection;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alumno
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        new BBDD().getConnection();
        if(!BBDD.hayDatos()){
          BBDD.readJSON("src/main/Resources/TIENDA.json");  
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel = new javax.swing.JPanel();
        informacion = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        categoriasProductos = new javax.swing.JLabel();
        usuarios1 = new javax.swing.JLabel();
        HistorialCompras = new javax.swing.JLabel();
        Productos = new javax.swing.JLabel();
        HacerCompra1 = new javax.swing.JLabel();
        Limpiar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Panel.setBackground(new java.awt.Color(0, 204, 204));

        informacion.setBackground(new java.awt.Color(255, 255, 255));
        informacion.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        informacion.setText("     Informacion...");
        informacion.setOpaque(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setRequestFocusEnabled(false);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo.PNG"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(511, 511, 511))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(15, 15, 15))
        );

        categoriasProductos.setBackground(new java.awt.Color(255, 255, 255));
        categoriasProductos.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        categoriasProductos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        categoriasProductos.setText("Categorias de productos");
        categoriasProductos.setOpaque(true);
        categoriasProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                categoriasProductosMouseClicked(evt);
            }
        });

        usuarios1.setBackground(new java.awt.Color(255, 255, 255));
        usuarios1.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        usuarios1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        usuarios1.setText("Usuarios");
        usuarios1.setOpaque(true);
        usuarios1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usuarios1MouseClicked(evt);
            }
        });

        HistorialCompras.setBackground(new java.awt.Color(255, 255, 255));
        HistorialCompras.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        HistorialCompras.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HistorialCompras.setText("Historial de Compras");
        HistorialCompras.setOpaque(true);
        HistorialCompras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HistorialComprasMouseClicked(evt);
            }
        });

        Productos.setBackground(new java.awt.Color(255, 255, 255));
        Productos.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        Productos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Productos.setText("Productos");
        Productos.setOpaque(true);
        Productos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductosMouseClicked(evt);
            }
        });

        HacerCompra1.setBackground(new java.awt.Color(255, 255, 255));
        HacerCompra1.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        HacerCompra1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HacerCompra1.setText("Hacer Compra");
        HacerCompra1.setOpaque(true);
        HacerCompra1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HacerCompra1MouseClicked(evt);
            }
        });

        Limpiar.setBackground(new java.awt.Color(255, 255, 255));
        Limpiar.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        Limpiar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Limpiar.setText("Limpiar");
        Limpiar.setOpaque(true);
        Limpiar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LimpiarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout PanelLayout = new javax.swing.GroupLayout(Panel);
        Panel.setLayout(PanelLayout);
        PanelLayout.setHorizontalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(PanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(usuarios1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(HistorialCompras, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(categoriasProductos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Productos, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(HacerCompra1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelLayout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(informacion, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(201, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(403, 403, 403))))
        );
        PanelLayout.setVerticalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelLayout.createSequentialGroup()
                        .addComponent(usuarios1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(categoriasProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(HistorialCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Productos, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(informacion, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HacerCompra1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(81, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void categoriasProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_categoriasProductosMouseClicked
      cargarCategorias();
    }//GEN-LAST:event_categoriasProductosMouseClicked

    private void usuarios1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usuarios1MouseClicked
       cargarUsuarios();
    }//GEN-LAST:event_usuarios1MouseClicked

    private void HistorialComprasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HistorialComprasMouseClicked
        cargarHistorialCompras();
    }//GEN-LAST:event_HistorialComprasMouseClicked

    private void ProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductosMouseClicked
        cargarProductos();
    }//GEN-LAST:event_ProductosMouseClicked

    private void HacerCompra1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HacerCompra1MouseClicked
       Comprar comprar=new Comprar();
        comprar.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_HacerCompra1MouseClicked

    private void LimpiarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LimpiarMouseClicked
       informacion.setText("");
    }//GEN-LAST:event_LimpiarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel HacerCompra1;
    private javax.swing.JLabel HistorialCompras;
    private javax.swing.JLabel Limpiar;
    private javax.swing.JPanel Panel;
    private javax.swing.JLabel Productos;
    private javax.swing.JLabel categoriasProductos;
    private javax.swing.JLabel informacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel usuarios1;
    // End of variables declaration//GEN-END:variables

    private void cargarUsuarios() {
        try (Connection connection = BBDD.getConnection()) {
            if (connection == null) {
                informacion.setText("<html>Error: No se pudo establecer conexión con la base de datos.</html>");
                return;
            }

            String query = "SELECT * FROM usuarios";
            StringBuilder usuariosInfo = new StringBuilder("<html>");

            try (Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(query)) {

                if (!resultSet.isBeforeFirst()) { // Verificar si hay datos
                    informacion.setText("<html>No hay usuarios registrados en la base de datos.</html>");
                    return;
                }

                while (resultSet.next()) {
                    int idUsuario = resultSet.getInt("id_usuario");
                    String nombre = resultSet.getString("nombre");
                    String email = resultSet.getString("email");

                    // Usar etiquetas HTML para separar los campos y los usuarios
                    usuariosInfo.append("ID: ").append(idUsuario).append("<br>")
                            .append("Nombre: ").append(nombre).append("<br>")
                            .append("Email: ").append(email).append("<br><br>");
                }

                usuariosInfo.append("</html>");
                informacion.setText(usuariosInfo.toString());

            } catch (SQLException e) {
                informacion.setText("<html>Error al obtener los usuarios: " + e.getMessage() + "</html>");
                e.printStackTrace();
            }
        } catch (SQLException e) {
            informacion.setText("<html>Error al conectar con la base de datos: " + e.getMessage() + "</html>");
            e.printStackTrace();
        }
    }

    private void cargarCategorias() {
        Connection connection = BBDD.getConnection();
        if (connection == null) {
            informacion.setText("Error: No se pudo establecer conexión con la base de datos.");
            return;
        }

        String query = "SELECT * FROM categorias";
        StringBuilder categoriasInfo = new StringBuilder();

        try (Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(query)) {

            if (!resultSet.isBeforeFirst()) { // Verificar si hay datos
                informacion.setText("No hay categorías registradas en la base de datos.");
                return;
            }

            while (resultSet.next()) {
                int idCategoria = resultSet.getInt("id_categoria");
                String nombreCategoria = resultSet.getString("nombre");

                // Agregar la información de la categoría con un salto de línea al final
                categoriasInfo.append("ID: ").append(idCategoria)
                        .append(", Nombre: ").append(nombreCategoria)
                        .append("\n");
            }

            // Establecer el texto en el JLabel
            informacion.setText("<html>" + categoriasInfo.toString().replaceAll("\n", "<br/>") + "</html>");

        } catch (SQLException e) {
            informacion.setText("Error al obtener las categorías: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void cargarProductos() {
        Connection connection = BBDD.getConnection();
        if (connection == null) {
            informacion.setText("Error: No se pudo establecer conexión con la base de datos.");
            return;
        }

        String query = "SELECT p.id_producto, p.nombre, p.precio, p.inventario, c.nombre AS categoria "
                + "FROM productos p "
                + "JOIN categorias c ON p.id_categoria = c.id_categoria";
        StringBuilder productosInfo = new StringBuilder();

        try (Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(query)) {

            if (!resultSet.isBeforeFirst()) { // Verificar si hay datos
                informacion.setText("No hay productos registrados en la base de datos.");
                return;
            }

            while (resultSet.next()) {
                int idProducto = resultSet.getInt("id_producto");
                String nombreProducto = resultSet.getString("nombre");
                double precio = resultSet.getDouble("precio");
                int inventario = resultSet.getInt("inventario");
                String categoria = resultSet.getString("categoria");

                // Agregar la información del producto con un salto de línea al final
                productosInfo.append("ID: ").append(idProducto)
                        .append(", Nombre: ").append(nombreProducto)
                        .append(", Precio: ").append(precio)
                        .append(", Inventario: ").append(inventario)
                        .append(", Categoría: ").append(categoria)
                        .append("\n");
            }

            // Establecer el texto en el JLabel
            informacion.setText("<html>" + productosInfo.toString().replaceAll("\n", "<br/>") + "</html>");

        } catch (SQLException e) {
            informacion.setText("Error al obtener los productos: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void cargarHistorialCompras() {
        Connection connection = BBDD.getConnection();
        if (connection == null) {
            informacion.setText("Error: No se pudo establecer conexión con la base de datos.");
            return;
        }

        String query = "SELECT h.id_compra, u.nombre AS usuario, p.nombre AS producto, h.cantidad, h.fecha "
                + "FROM historial_compras h "
                + "JOIN usuarios u ON h.id_usuario = u.id_usuario "
                + "JOIN productos p ON h.id_producto = p.id_producto";
        StringBuilder historialInfo = new StringBuilder();

        try (Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(query)) {

            if (!resultSet.isBeforeFirst()) { // Verificar si hay datos
                informacion.setText("No hay historial de compras registrado en la base de datos.");
                return;
            }

            while (resultSet.next()) {
                int idCompra = resultSet.getInt("id_compra");
                String usuario = resultSet.getString("usuario");
                String producto = resultSet.getString("producto");
                int cantidad = resultSet.getInt("cantidad");
                String fecha = resultSet.getString("fecha");

                // Agregar la información de la compra con un salto de línea al final
                historialInfo.append("ID Compra: ").append(idCompra)
                        .append(", Usuario: ").append(usuario)
                        .append(", Producto: ").append(producto)
                        .append(", Cantidad: ").append(cantidad)
                        .append(", Fecha: ").append(fecha)
                        .append("\n");
            }

            // Establecer el texto en el JLabel
            informacion.setText("<html>" + historialInfo.toString().replaceAll("\n", "<br/>") + "</html>");

        } catch (SQLException e) {
            informacion.setText("Error al obtener el historial de compras: " + e.getMessage());
            e.printStackTrace();
        }
    }

}
