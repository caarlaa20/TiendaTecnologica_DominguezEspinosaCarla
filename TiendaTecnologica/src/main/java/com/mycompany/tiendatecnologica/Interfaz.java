/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.tiendatecnologica;

import static com.mycompany.tiendatecnologica.BBDD.getConnection;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alumno
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        new BBDD().getConnection();

        BBDD.readJSON("src/main/Resources/TIENDA.json");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel = new javax.swing.JPanel();
        Logo = new javax.swing.JLabel();
        Compra = new javax.swing.JButton();
        Categorias = new javax.swing.JButton();
        Historial = new javax.swing.JButton();
        Usuarios1 = new javax.swing.JButton();
        informacion = new javax.swing.JLabel();
        limpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Panel.setBackground(new java.awt.Color(189, 149, 202));

        Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/LogoSample_ByTailorBrands.jpg"))); // NOI18N

        Compra.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        Compra.setText("Hacer Compra");
        Compra.setBorder(null);
        Compra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompraActionPerformed(evt);
            }
        });

        Categorias.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        Categorias.setText("Categor√≠as de productos");
        Categorias.setBorder(null);
        Categorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoriasActionPerformed(evt);
            }
        });

        Historial.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        Historial.setText("Historicos de compras");
        Historial.setBorder(null);
        Historial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistorialActionPerformed(evt);
            }
        });

        Usuarios1.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        Usuarios1.setText("Usuarios");
        Usuarios1.setBorder(null);
        Usuarios1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Usuarios1ActionPerformed(evt);
            }
        });

        informacion.setText("jLabel1");
        informacion.setOpaque(true);

        limpiar.setText("Limpiar");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelLayout = new javax.swing.GroupLayout(Panel);
        Panel.setLayout(PanelLayout);
        PanelLayout.setHorizontalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelLayout.createSequentialGroup()
                .addGap(46, 321, Short.MAX_VALUE)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PanelLayout.createSequentialGroup()
                        .addComponent(Categorias, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addComponent(Historial, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69))
                    .addGroup(PanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(Logo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Compra, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))))
            .addGroup(PanelLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(informacion, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addComponent(limpiar)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelLayout.createSequentialGroup()
                    .addGap(56, 56, 56)
                    .addComponent(Usuarios1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(603, Short.MAX_VALUE)))
        );
        PanelLayout.setVerticalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelLayout.createSequentialGroup()
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(Logo, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Compra, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)))
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Categorias, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Historial, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(informacion, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(50, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(limpiar)
                        .addGap(60, 60, 60))))
            .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelLayout.createSequentialGroup()
                    .addGap(233, 233, 233)
                    .addComponent(Usuarios1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(270, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(153, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(482, 482, 482))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CompraActionPerformed

    private void CategoriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoriasActionPerformed
        cargarCategorias();
    }//GEN-LAST:event_CategoriasActionPerformed

    private void Usuarios1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Usuarios1ActionPerformed
        cargarUsuarios();
    }//GEN-LAST:event_Usuarios1ActionPerformed

    private void HistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistorialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HistorialActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        informacion.setText("");
    }//GEN-LAST:event_limpiarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Categorias;
    private javax.swing.JButton Compra;
    private javax.swing.JButton Historial;
    private javax.swing.JLabel Logo;
    private javax.swing.JPanel Panel;
    private javax.swing.JButton Usuarios1;
    private javax.swing.JLabel informacion;
    private javax.swing.JButton limpiar;
    // End of variables declaration//GEN-END:variables

    private void cargarUsuarios() {
        try (Connection connection = BBDD.getConnection()) {
            if (connection == null) {
                informacion.setText("<html>Error: No se pudo establecer conexi√≥n con la base de datos.</html>");
                return;
            }

            String query = "SELECT * FROM usuarios";
            StringBuilder usuariosInfo = new StringBuilder("<html>");

            try (Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(query)) {

                if (!resultSet.isBeforeFirst()) { // Verificar si hay datos
                    informacion.setText("<html>No hay usuarios registrados en la base de datos.</html>");
                    return;
                }

                while (resultSet.next()) {
                    int idUsuario = resultSet.getInt("id_usuario");
                    String nombre = resultSet.getString("nombre");
                    String email = resultSet.getString("email");

                    // Usar etiquetas HTML para separar los campos y los usuarios
                    usuariosInfo.append("ID: ").append(idUsuario).append("<br>")
                            .append("Nombre: ").append(nombre).append("<br>")
                            .append("Email: ").append(email).append("<br><br>");
                }

                usuariosInfo.append("</html>");
                informacion.setText(usuariosInfo.toString());

            } catch (SQLException e) {
                informacion.setText("<html>Error al obtener los usuarios: " + e.getMessage() + "</html>");
                e.printStackTrace();
            }
        } catch (SQLException e) {
            informacion.setText("<html>Error al conectar con la base de datos: " + e.getMessage() + "</html>");
            e.printStackTrace();
        }
    }

    private void cargarCategorias() {
        Connection connection = BBDD.getConnection();
        if (connection == null) {
            informacion.setText("Error: No se pudo establecer conexi√≥n con la base de datos.");
            return;
        }

        String query = "SELECT * FROM categorias";
        StringBuilder categoriasInfo = new StringBuilder();

        try (Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(query)) {

            if (!resultSet.isBeforeFirst()) { // Verificar si hay datos
                informacion.setText("No hay categor√≠as registradas en la base de datos.");
                return;
            }

            while (resultSet.next()) {
                int idCategoria = resultSet.getInt("id_categoria");
                String nombreCategoria = resultSet.getString("nombre");

                // Agregar la informaci√≥n de la categor√≠a con un salto de l√≠nea al final
                categoriasInfo.append("ID: ").append(idCategoria)
                        .append(", Nombre: ").append(nombreCategoria)
                        .append("\n");
            }

            // Establecer el texto en el JLabel
            informacion.setText("<html>" + categoriasInfo.toString().replaceAll("\n", "<br/>") + "</html>");

        } catch (SQLException e) {
            informacion.setText("Error al obtener las categor√≠as: " + e.getMessage());
            e.printStackTrace();
        }
    }

}

